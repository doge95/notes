master:
  clusterName: "elasticsearch"
  nodeGroup: "master"
  roles:
    master: "true"
    ingest: "false"
    data: "false"
    ml: "false"
    remote_cluster_client: "false"
  protocol: https
  extraEnvs:
    - name: ELASTIC_PASSWORD
      valueFrom:
        secretKeyRef:
          name: elastic-credentials
          key: password
    - name: ELASTIC_USERNAME
      valueFrom:
        secretKeyRef:
          name: elastic-credentials
          key: username
  # Allows you to add any config files in /usr/share/elasticsearch/config/
  # such as elasticsearch.yml and log4j2.properties
  esConfig:
    elasticsearch.yml: |
      xpack.security.enabled: true
      xpack.security.transport.ssl.enabled: true
      xpack.security.transport.ssl.verification_mode: certificate
      xpack.security.transport.ssl.keystore.path: /usr/share/elasticsearch/config/certs/elastic-certificates.p12
      xpack.security.transport.ssl.truststore.path: /usr/share/elasticsearch/config/certs/elastic-certificates.p12
      xpack.security.http.ssl.enabled: true
      xpack.security.http.ssl.truststore.path: /usr/share/elasticsearch/config/certs/elastic-certificates.p12
      xpack.security.http.ssl.keystore.path: /usr/share/elasticsearch/config/certs/elastic-certificates.p12
    log4j2.properties: |
      status = error
      appender.console.type = Console
      appender.console.name = console
      appender.console.layout.type = PatternLayout
      appender.console.layout.pattern = [%d{ISO8601}][%-5p][%-25c{1.}] [%node_name]%marker%m%n
      rootLogger.level = info
      rootLogger.appenderRef.console.ref = console
      logger.searchguard.name = com.floragunn
      logger.searchguard.level = info
  secretMounts:
    - name: elastic-certificates
      secretName: elastic-certificates
      path: /usr/share/elasticsearch/config/certs

data:
  clusterName: "elasticsearch"
  nodeGroup: "data"
  roles:
    master: "false"
    ingest: "true"
    data: "true"
    ml: "false"
    remote_cluster_client: "false"
  protocol: https
  lifecycle:
    ## (string) Script to execute prior the data pod stops. Ignored if `data.hooks.drain.enabled` is true (default)
    preStop:
      exec:
        command:
          - bash
          - -c
          - |
            #!/bin/bash
            exec &> >(tee -a "/var/log/elasticsearch-hooks.log")
            ES_URL=https://$ELASTIC_USERNAME:$ELASTIC_PASSWORD@elasticsearch-client:9200
            NODE_NAME=${HOSTNAME}
            curl -s -k -XPUT -H 'Content-Type: application/json' "$ES_URL/_cluster/settings" -d "{
              \"transient\" :{
                  \"cluster.routing.allocation.exclude._name\" : \"${NODE_NAME}\"
              }
            }"
            echo "Node ${NODE_NAME} is exluded from the allocation"

            while true ; do
              echo -e "Wait for node ${NODE_NAME} to become empty"
              SHARDS_ALLOCATION=$(curl -s -k  -XGET "$ES_URL/_cat/shards")
              if ! echo "${SHARDS_ALLOCATION}" | grep -E "${NODE_NAME}"; then
                break
              fi
              sleep 1
            done
    ## (string) Script to execute after the data pod starts. Ignored if `data.hooks.drain.enabled` is true (default)
    postStart:
      exec:
        command:
          - bash
          - -c
          - |
            #!/bin/bash
            exec &> >(tee -a "/var/log/elasticsearch-hooks.log")
            ES_URL=https://$ELASTIC_USERNAME:$ELASTIC_PASSWORD@elasticsearch-client:9200
            NODE_NAME=${HOSTNAME}
            CLUSTER_SETTINGS=$(curl -s -k -XGET "$ES_URL/_cluster/settings")
            if echo "${CLUSTER_SETTINGS}" | grep -E "${NODE_NAME}"; then
              echo "Activate node ${NODE_NAME}"
              curl -s -k -XPUT -H 'Content-Type: application/json' "$ES_URL/_cluster/settings" -d "{
                \"transient\" :{
                    \"cluster.routing.allocation.exclude._name\" : null
                }
              }"
            fi
            echo "Node ${NODE_NAME} is ready to be used"
  extraEnvs:
    - name: ELASTIC_PASSWORD
      valueFrom:
        secretKeyRef:
          name: elastic-credentials
          key: password
    - name: ELASTIC_USERNAME
      valueFrom:
        secretKeyRef:
          name: elastic-credentials
          key: username
  # Allows you to add any config files in /usr/share/elasticsearch/config/
  # such as elasticsearch.yml and log4j2.properties
  esConfig:
    elasticsearch.yml: |
      xpack.security.enabled: true
      xpack.security.transport.ssl.enabled: true
      xpack.security.transport.ssl.verification_mode: certificate
      xpack.security.transport.ssl.keystore.path: /usr/share/elasticsearch/config/certs/elastic-certificates.p12
      xpack.security.transport.ssl.truststore.path: /usr/share/elasticsearch/config/certs/elastic-certificates.p12
      xpack.security.http.ssl.enabled: true
      xpack.security.http.ssl.truststore.path: /usr/share/elasticsearch/config/certs/elastic-certificates.p12
      xpack.security.http.ssl.keystore.path: /usr/share/elasticsearch/config/certs/elastic-certificates.p12
    log4j2.properties: |
      status = error
      appender.console.type = Console
      appender.console.name = console
      appender.console.layout.type = PatternLayout
      appender.console.layout.pattern = [%d{ISO8601}][%-5p][%-25c{1.}] [%node_name]%marker%m%n
      rootLogger.level = info
      rootLogger.appenderRef.console.ref = console
      logger.searchguard.name = com.floragunn
      logger.searchguard.level = info
  secretMounts:
    - name: elastic-certificates
      secretName: elastic-certificates
      path: /usr/share/elasticsearch/config/certs
client:
  clusterName: "elasticsearch"
  nodeGroup: "client"
  roles:
    master: "false"
    ingest: "false"
    data: "false"
    ml: "false"
    remote_cluster_client: "false"
  protocol: https
  persistence:
    enabled: false
  extraEnvs:
    - name: ELASTIC_PASSWORD
      valueFrom:
        secretKeyRef:
          name: elastic-credentials
          key: password
    - name: ELASTIC_USERNAME
      valueFrom:
        secretKeyRef:
          name: elastic-credentials
          key: username
  # Allows you to add any config files in /usr/share/elasticsearch/config/
  # such as elasticsearch.yml and log4j2.properties
  esConfig:
    elasticsearch.yml: |
      xpack.security.enabled: true
      xpack.security.transport.ssl.enabled: true
      xpack.security.transport.ssl.verification_mode: certificate
      xpack.security.transport.ssl.keystore.path: /usr/share/elasticsearch/config/certs/elastic-certificates.p12
      xpack.security.transport.ssl.truststore.path: /usr/share/elasticsearch/config/certs/elastic-certificates.p12
      xpack.security.http.ssl.enabled: true
      xpack.security.http.ssl.truststore.path: /usr/share/elasticsearch/config/certs/elastic-certificates.p12
      xpack.security.http.ssl.keystore.path: /usr/share/elasticsearch/config/certs/elastic-certificates.p12
    log4j2.properties: |
      status = error
      appender.console.type = Console
      appender.console.name = console
      appender.console.layout.type = PatternLayout
      appender.console.layout.pattern = [%d{ISO8601}][%-5p][%-25c{1.}] [%node_name]%marker%m%n
      rootLogger.level = info
      rootLogger.appenderRef.console.ref = console
      logger.searchguard.name = com.floragunn
      logger.searchguard.level = info
  secretMounts:
    - name: elastic-certificates
      secretName: elastic-certificates
      path: /usr/share/elasticsearch/config/certs
kibana:
  # Different versions of Kibana running against the same Elasticsearch index, such as during a rolling upgrade, can cause data loss. 
  # Change RollingUpdate to Recreate if upgrading Kibana version. 
  updateStrategy:
    type: "RollingUpdate"
  elasticsearchHosts: "https://elasticsearch-master:9200"
  protocol: https
  extraEnvs:
    - name: 'ELASTICSEARCH_USERNAME'
      valueFrom:
        secretKeyRef:
          name: elastic-credentials
          key: username
    - name: 'ELASTICSEARCH_PASSWORD'
      valueFrom:
        secretKeyRef:
          name: elastic-credentials
          key: password
    - name: 'KIBANA_ENCRYPTION_KEY'
      valueFrom:
        secretKeyRef:
          name: kibana
          key: encryptionkey
  kibanaConfig:
    kibana.yml: |
      server.ssl:
        enabled: true
        key: /usr/share/kibana/config/certs/elastic-certificate.pem
        certificate: /usr/share/kibana/config/certs/elastic-certificate.pem
      xpack.security.encryptionKey: ${KIBANA_ENCRYPTION_KEY}
      elasticsearch.ssl:
        certificateAuthorities: /usr/share/kibana/config/certs/elastic-certificate.pem
        verificationMode: certificate
  secretMounts:
    - name: elastic-certificate-pem
      secretName: elastic-certificate-pem
      path: /usr/share/kibana/config/certs
prometheus-elasticsearch-exporter:
  es:
    uri: https://elastic:<pwd>@elasticsearch-client:9200
    sslSkipVerify: true
  serviceMonitor:
    enabled: true
    labels:
      release: default-monitor
    interval: 30s
    scrapeTimeout: 5s
